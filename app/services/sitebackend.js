"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var site_1 = require("./site");
var observable_array_1 = require("data/observable-array");
var file_system_1 = require("file-system");
var cryptoservice_1 = require("./cryptoservice");
var Sqlite = require("nativescript-sqlite");
var SiteBackend;
(function (SiteBackend) {
    function Initialize() {
        return new Promise(function (resolve, reject) {
            var sentence = "CREATE TABLE Site (\n                            Id INTEGER PRIMARY KEY AUTOINCREMENT,\n                            LastChange NUMERIC NOT NULL,\n                            InSync NUMERIC NOT NULL,\n                            Name TEXT NOT NULL,\n                            Url\tTEXT NOT NULL,\n                            User TEXT,\n                            Password TEXT,\n                            Tags TEXT);";
            (new Sqlite("guaysin.db")).then(function (db) {
                db.execSQL(sentence).then(function (id) {
                    db.close();
                    resolve();
                }, function (error) {
                    reject(error);
                });
            }, function (error) {
                reject(error);
            });
        });
    }
    SiteBackend.Initialize = Initialize;
    function LoadSites(filter) {
        var sentence = "SELECT * FROM Site";
        var data = new observable_array_1.ObservableArray();
        var regexp;
        if (filter)
            regexp = new RegExp(".*" + filter + ".*");
        (new Sqlite("guaysin.db")).then(function (db) {
            db.all(sentence).then(function (rows) {
                for (var row in rows) {
                    var r = rows[row];
                    //let site = new Site(r[3],r[4],r[5],r[6],r[0]);
                    var site = new site_1.Site(cryptoservice_1.CryptoServices.Decode(r[3]), cryptoservice_1.CryptoServices.Decode(r[4]), cryptoservice_1.CryptoServices.Decode(r[5]), cryptoservice_1.CryptoServices.Decode(r[6]), r[0]);
                    if (regexp) {
                        if (regexp.test(site.Name))
                            data.push(site);
                    }
                    else {
                        data.push(site);
                    }
                }
                db.close();
            }, function (error) {
                throw new Error(error.message);
            });
        });
        return data;
    }
    SiteBackend.LoadSites = LoadSites;
    function SaveSite(site) {
        return new Promise(function (resolve, reject) {
            var sentence;
            if (site.Id == undefined) {
                sentence = "INSERT INTO Site (LastChange, InSync, Name, Url, User, Password) VALUES (?,?,?,?,?,?);";
            }
            else {
                sentence = "UPDATE Site SET LastChange=?,InSync=?,Name=?,Url=?,User=?,Password=? WHERE Id=" + site.Id + ";";
            }
            var params = [1, 2,
                cryptoservice_1.CryptoServices.Encode(site.Name),
                cryptoservice_1.CryptoServices.Encode(site.Url),
                cryptoservice_1.CryptoServices.Encode(site.User),
                cryptoservice_1.CryptoServices.Encode(site.Password)
            ];
            (new Sqlite("guaysin.db")).then(function (db) {
                db.execSQL(sentence, params).then(function (id) {
                    db.close();
                    resolve();
                }, function (error) {
                    reject(error);
                });
            }, function (error) {
                reject(error);
            });
        });
    }
    SiteBackend.SaveSite = SaveSite;
    function DeleteSite(site) {
        return new Promise(function (resolve, reject) {
            if (site.Id != undefined) {
                var sentence_1 = "DELETE FROM Site WHERE Id=" + site.Id + ";";
                (new Sqlite("guaysin.db")).then(function (db) {
                    db.execSQL(sentence_1).then(function (id) {
                        db.close();
                        resolve();
                    }, function (error) {
                        reject(error);
                    });
                }, function (error) {
                    reject(error);
                });
            }
        });
    }
    SiteBackend.DeleteSite = DeleteSite;
    function CleanSites() {
        return new Promise(function (resolve, reject) {
            var sentence = "DELETE FROM Site;";
            (new Sqlite("guaysin.db")).then(function (db) {
                db.execSQL(sentence).then(function (id) {
                    db.close();
                    resolve();
                }, function (error) {
                    reject(error);
                });
            }, function (error) {
                reject(error);
            });
        });
    }
    function GetBackupFile() {
        var downloadsFolderPath = file_system_1.path.join(android.os.Environment.getExternalStoragePublicDirectory(android.os.Environment.DIRECTORY_DOWNLOADS).getAbsolutePath().toString());
        var downloadsFolder = file_system_1.Folder.fromPath(downloadsFolderPath);
        var file = downloadsFolder.getFile("guaysindata.json");
        return file;
    }
    function ExportToFile() {
        var sentence = "SELECT * FROM Site";
        return new Promise(function (resolve, reject) {
            //get all sites and create array
            (new Sqlite("guaysin.db")).then(function (db) {
                db.all(sentence).then(function (rows) {
                    var data = [];
                    for (var row in rows) {
                        var r = rows[row];
                        var site = new site_1.Site(cryptoservice_1.CryptoServices.Decode(r[3]), cryptoservice_1.CryptoServices.Decode(r[4]), cryptoservice_1.CryptoServices.Decode(r[5]), cryptoservice_1.CryptoServices.Decode(r[6]), r[0]);
                        data.push(site);
                    }
                    db.close();
                    //let secret:string = CryptoServices.GetEncryptedSecret();
                    //let payload = {'secret':secret,'sites':data};
                    //prepare target file
                    var file = GetBackupFile();
                    //save and return
                    file.writeText(JSON.stringify(data)).then(function () {
                        resolve();
                    }, function (error) {
                        reject(error);
                    });
                }, function (error) {
                    reject(error);
                });
            });
        });
    }
    SiteBackend.ExportToFile = ExportToFile;
    function ImportFromFile() {
        return new Promise(function (resolve, reject) {
            var file = GetBackupFile();
            //1.Read JSON file
            file.readText().then(function (jsondata) {
                //let data = JSON.parse(jsondata);
                //let secret:string = data.secret;
                var sites = JSON.parse(jsondata);
                //2.Clean DB
                CleanSites().then(function () {
                    //3.Insert sites
                    sites.forEach(function (site) {
                        site.Id = undefined;
                        SaveSite(site);
                    });
                    resolve();
                });
            });
        });
    }
    SiteBackend.ImportFromFile = ImportFromFile;
})(SiteBackend = exports.SiteBackend || (exports.SiteBackend = {}));
//# sourceMappingURL=data:application/json;base64,